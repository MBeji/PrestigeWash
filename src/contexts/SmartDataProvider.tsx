import React from 'react';
import { getAppMode, config } from '../config/app';

// Import seulement du contexte de d√©veloppement (toujours s√ªr)
import { DataProvider as DevelopmentDataProvider, useData as useDevData } from './DataContext-dev';

interface SmartDataProviderProps {
  children: React.ReactNode;
}

export const SmartDataProvider: React.FC<SmartDataProviderProps> = ({ children }) => {
  const [appMode] = React.useState(() => {
    console.log('üîß [SMART] D√©tection du mode d\'application...');
    console.log('üîß [SMART] Config Supabase:', {
      hasSupabase: config.hasSupabase,
      url: config.supabaseUrl ? 'D√©finie' : 'Non d√©finie',
      key: config.supabaseAnonKey ? 'D√©finie' : 'Non d√©finie'
    });
    
    // Forcer le mode d√©veloppement si Supabase n'est pas configur√©
    if (!config.hasSupabase) {
      console.log('üîß [SMART] Supabase non configur√© - Mode d√©veloppement forc√©');
      return 'development';
    }
    
    const mode = getAppMode();
    console.log('üîß [SMART] Mode s√©lectionn√©:', mode);
    return mode;
  });
  
  React.useEffect(() => {
    console.log(`üîß DataProvider Mode: ${appMode}`);
    console.log('üîß Supabase configur√©:', config.hasSupabase);
  }, [appMode]);
  // TOUJOURS utiliser le mode d√©veloppement pour √©viter les erreurs Supabase
  console.log('üß™ [SMART] Utilisation forc√©e du DataContext Mock (D√©veloppement)');
  return <DevelopmentDataProvider>{children}</DevelopmentDataProvider>;
};

// Hook unifi√© pour utiliser les donn√©es
export const useSmartData = () => {
  // TOUJOURS utiliser les donn√©es de d√©veloppement
  console.log('üß™ [SMART] Utilisation forc√©e des donn√©es de d√©veloppement');
  return useDevData();
};

// Export des types pour compatibilit√©
export type { Booking, User } from './DataContext-dev';
